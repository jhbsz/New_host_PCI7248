Attribute VB_Name = "AlcorSCD"
Option Explicit

Public strReaderName As String

    ' Resource Manager context
Public lngContext As Long
    ' handle to card
Public lngCard As Long
    ' active protocol negotiated
Public lngActiveProtocol As Long
Public lngPreProtocol As Long

Public lngOldCardStatus As Long
Public Protocol_Supported As String

Public udtReaderStates(1) As SCARD_READERSTATEA

Public Const lngBufferSize As Long = 2048
Public Const WORD_PAGE_SIZE As Long = 8
'Public Const ProductString As String = "EMV USB smart card reader"
'Public Const VenderString As String = "Alcor Micro, Corp."

'Alcor string
Public Const ProductString As String = "Usb Smart Card Reader"
Public Const VenderString As String = "Au9520DS"

'Jujo String :  Jujo Electronic Co.,Ltd Smart Card Reader 0
'Public Const VenderString_AU9520JJ As String = "Jujo Electronic Co.,Ltd"
'Public Const ProductString_AU9520JJ As String = "Smart Card Reader"
Public Const VenderString_AU9520JJ As String = "Jujo Electronics."
Public Const ProductString_AU9520JJ As String = "Smart Card Reader"

Public Const VenderString_AU9520FLSingleMode As String = "Generic"
Public Const ProductString_AU9520FLSingleMode As String = "Usb Smart Card Reader"

Public Const VenderString_AU9520GLSingleMode As String = "Au9520DS"
Public Const ProductString_AU9520GLSingleMode As String = "Usb Smart Card Reader"
'Au9520DS Usb Smart Card Reader 0
Public Const VenderString_AU9520ASSingleMode As String = "Au9520DS"
Public Const ProductString_AU9520ASSingleMode As String = "Usb Smart Card Reader 0"
Public Const strSpacer As String = ".................................................."
Public Const strTab As String = "  "
Public Const strPass As String = "PASS"
Public Const strFail As String = "FAIL"

Public IsReaderLost As Boolean
Public bCurSlotNum As Byte
Public Declare Function fnScsi2usb2K_KillEXE _
       Lib "usbreset.dll" _
       () _
As Integer




'connect to the reader
Public Function ConnectAlcorReader() As Long
    Dim lngResult As Long

    lngCard = 0
    lngActiveProtocol = 0
    If (IsReaderLost = True) Then
        lngResult = SCardConnectA(lngContext, strReaderName, SCARD_SHARE_DIRECT, _
                    0, lngCard, lngActiveProtocol)
        If (lngResult = 0) Then
'                Call SetUnresponsedCardToMCardMode
                lngResult = SCardDisconnect(lngCard, SCARD_LEAVE_CARD)
                IsReaderLost = False
        End If
    End If
    lngResult = SCardConnectA(lngContext, strReaderName, SCARD_SHARE_SHARED, _
                    SCARD_PROTOCOL_Tx, lngCard, lngActiveProtocol)
'    If lngresult = 0 Then

'        fmMain.sbStatus.Panels(1).Text = strReaderName
'    Else
'        fmMain.sbStatus.Panels(1).Text = "No Reader"
'        Exit Function
'    End If



End Function

Public Function GetSynCardATR(ATRstring As ARRAY_TYPE, ByRef lngControlReplyLen As Long) As Long

Dim OutBuffer(1) As Byte

'frank
GetSynCardATR = SCardControl(lngCard, IOCTL_GET_SYNCARD_ATR + &HC0& * bCurSlotNum, OutBuffer(0), 0, _
                        ATRstring.byteData(0), 4, lngControlReplyLen)
End Function






Public Function IsAT45D041Card(ATRdata As ARRAY_TYPE, lngATRLen As Long) As Boolean
    Dim strAlcorAT45D041CardATR As String
    Dim strCurrentATR As String
    Dim i As Byte
    
    If (lngATRLen <> 18) Then
        IsAT45D041Card = False
        Exit Function
    End If
    
    'This historical bytes is generated by the driver if the card is an unresponsed card(EPPROM card)
    strAlcorAT45D041CardATR = "AT45D041"
    strCurrentATR = ""
    For i = 1 To 15
        strCurrentATR = strCurrentATR & Chr(ATRdata.byteData(2 + i))
    Next i
    
    If (strCurrentATR = strAlcorAT45D041CardATR) Then
        IsAT45D041Card = True
    Else
        IsAT45D041Card = False
    End If



End Function

' e.g. 64 ==>40 ,10==>0A
Public Function Byte2Char(OneByte As Byte) As String

Dim tempA As String

tempA = Hex(OneByte)
If (Len(tempA) = 1) Then
    tempA = "0" & tempA
End If

Byte2Char = tempA

End Function



